name: CI/CD

on:
  pull_request:
  push:
    branches:
      - main
      - master
      - develop

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

# ensure that the workflow is only triggered once per PR, subsequent pushes to the PR will cancel
# and restart the workflow. See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Run clippy action
        uses: clechasseur/rs-clippy-check@v4
  doc:
    # run docs generation on nightly rather than stable. This enables features like
    # https://doc.rust-lang.org/beta/unstable-book/language-features/doc-cfg.html which allows an
    # API be documented as only available in some specific platforms.
    name: doc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
      - name: Run cargo doc
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: --cfg docsrs
  test:
    runs-on: ${{ matrix.os }}
    name: test ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Cargo test all features
        run: cargo test --all-features --all-targets

  bump:
    # Only bump version on changes to main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [clippy, doc, test]  # Wait for CI to pass before bumping
    outputs:
      new_version: ${{ steps.bump_version.outputs.NEW_VERSION }}
    
    steps:
      # Checkout the repository.
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Rust.
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache Rust dependencies and compilation artifacts
      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2

      # Cache cargo tools separately since they don't change often
      - name: Cache Cargo Tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/
          key: ${{ runner.os }}-cargo-tools-toml-cli
          restore-keys: |
            ${{ runner.os }}-cargo-tools-

      # Install toml-cli for version manipulation.
      - name: Install toml-cli
        run: |
          if ! command -v toml &> /dev/null; then
            echo "toml-cli not found in cache, installing..."
            cargo install toml-cli
          else
            echo "toml-cli found in cache: $(toml --version)"
          fi

      # Get current version and increment patch.
      - name: Bump Version
        id: bump_version
        run: |
          # Get current version from Cargo.toml.
          CURRENT_VERSION=$(toml get Cargo.toml package.version --raw)
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts.
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment patch version.
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update Cargo.toml with new version.
          toml set Cargo.toml package.version "$NEW_VERSION" > Cargo.toml.tmp
          mv Cargo.toml.tmp Cargo.toml
          
          # Save new version for later steps and jobs.
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Commit and push the version change.
      - name: Commit Version Bump
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add Cargo.toml
          git commit -m "chore: bump version to ${{ env.NEW_VERSION }} [skip ci]"
          git push origin main

      # Build and verify the package before tagging
      - name: Build Package
        run: |
          echo "Building package v${{ env.NEW_VERSION }}..."
          cargo build --release
          echo "Build completed successfully!"

      # Create and push a tag 
      - name: Create Git Tag
        run: |
          git tag "v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

  publish:
    # Publish to crates.io after successful bump
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [bump]  # Wait for version bump and tag creation
    
    steps:
      # Checkout the repository at the new tag
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.bump.outputs.new_version }}

      # Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache Rust dependencies
      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2

      # Publish to crates.io
      - name: Publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish

  build-release-binaries:
    # Build release binaries after successful bump
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [bump]  # Wait for version bump and tag creation
    
    steps:
      # Checkout the repository at the new tag
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.bump.outputs.new_version }}

      # Setup Rust with the target
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      # Cache Rust dependencies and compilation artifacts
      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2

      # Set version from bump job output
      - name: Set Version
        run: |
          VERSION=${{ needs.bump.outputs.new_version }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building release for version: $VERSION"

      # Build the binary for x86_64-unknown-linux-gnu
      - name: Build Release Binary
        run: |
          echo "Building release binary for x86_64-unknown-linux-gnu..."
          cargo build --release --target x86_64-unknown-linux-gnu --all-features
          echo "Build completed successfully!"

      # Create release archive
      - name: Create Release Archive
        run: |
          mkdir -p release-temp
          
          # Copy the binary
          cp target/x86_64-unknown-linux-gnu/release/ironshield release-temp/
          
          # Copy license and readme files
          cp LICENSE release-temp/
          cp README.md release-temp/
          cp README-crates.md release-temp/
          
          # Create the tar.gz archive with the specified naming format
          cd release-temp
          tar -czf "../ironshield-v${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz" *
          cd ..
          
          echo "Created archive: ironshield-v${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz"
          ls -la *.tar.gz

      # Upload binary as workflow artifact
      - name: Upload Release Binary
        uses: actions/upload-artifact@v4
        with:
          name: ironshield-v${{ env.VERSION }}-x86_64-unknown-linux-gnu
          path: ironshield-v${{ env.VERSION }}-x86_64-unknown-linux-gnu.tar.gz
          retention-days: 90
